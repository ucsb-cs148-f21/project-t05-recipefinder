{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/leonfeng/Desktop/project-t05-recipefinder/RecipeFinderApp/App.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useEffect } from 'react';\nimport Header from \"./components/Header\";\nimport ListItem from \"./components/ListItem\";\nimport AddIngredient from \"./components/AddIngredient\";\n\nvar App = function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      pantryIngredients = _useState2[0],\n      setPantryIngredients = _useState2[1];\n\n  var deleteItem = function deleteItem(id) {\n    setPantryIngredients(function (prevPantryIngredients) {\n      return prevPantryIngredients.filter(function (item) {\n        return item.id !== id;\n      });\n    });\n  };\n\n  useEffect(function () {\n    getPantryIngredientsFromUserDevice();\n  }, []);\n  useEffect(function () {\n    savePantryIngredientsToUserDevice(pantryIngredients);\n  }, [pantryIngredients]);\n\n  var savePantryIngredientsToUserDevice = function savePantryIngredientsToUserDevice(todos) {\n    var stringifyPantryIngredients;\n    return _regeneratorRuntime.async(function savePantryIngredientsToUserDevice$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            stringifyPantryIngredients = JSON.stringify(pantryIngredients);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('pantryIngredients', stringifyPantryIngredients));\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  var getPantryIngredientsFromUserDevice = function getPantryIngredientsFromUserDevice() {\n    var _pantryIngredients;\n\n    return _regeneratorRuntime.async(function getPantryIngredientsFromUserDevice$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('pantryIngredients'));\n\n          case 3:\n            _pantryIngredients = _context2.sent;\n\n            if (_pantryIngredients != null) {\n              setPantryIngredients(JSON.parse(_pantryIngredients));\n            }\n\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var addPantryIngredient = function addPantryIngredient(text) {\n    if (text == '') {\n      Alert.alert('No item entered', 'Please enter an ingredient when adding to your pantry list');\n    } else {\n      setPantryIngredients(function (prevPantryIngredients) {\n        return [{\n          id: Math.random(),\n          ingredient: text\n        }].concat(_toConsumableArray(prevPantryIngredients));\n      });\n    }\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, React.createElement(Header, {\n    title: \"Pantry List\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), React.createElement(AddIngredient, {\n    addPantryIngredient: addPantryIngredient,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), React.createElement(FlatList, {\n    data: pantryIngredients,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(ListItem, {\n        item: item,\n        deleteItem: deleteItem,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 33\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\nexport default App;","map":{"version":3,"sources":["/Users/leonfeng/Desktop/project-t05-recipefinder/RecipeFinderApp/App.js"],"names":["React","useState","AsyncStorage","useEffect","Header","ListItem","AddIngredient","App","pantryIngredients","setPantryIngredients","deleteItem","id","prevPantryIngredients","filter","item","getPantryIngredientsFromUserDevice","savePantryIngredientsToUserDevice","todos","stringifyPantryIngredients","JSON","stringify","setItem","console","log","getItem","parse","addPantryIngredient","text","Alert","alert","Math","random","ingredient","styles","container","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {View, StyleSheet, FlatList, Alert} from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useEffect } from 'react';\n\n\n import Header from './components/Header';\nimport ListItem from './components/ListItem';\nimport AddIngredient from './components/AddIngredient';\n\nconst App = () => {\n  const [pantryIngredients, setPantryIngredients] = useState([]);\n  const deleteItem = id => {\n    setPantryIngredients(prevPantryIngredients => {\n      return prevPantryIngredients.filter(item => item.id !== id);\n    });\n  };\n\n  useEffect(() =>{\n    getPantryIngredientsFromUserDevice();\n  }, []);\n\n  useEffect(() => {\n    savePantryIngredientsToUserDevice(pantryIngredients);\n  }, [pantryIngredients]);\n\n  const savePantryIngredientsToUserDevice = async todos => {\n    try {\n      const stringifyPantryIngredients = JSON.stringify(pantryIngredients);\n      await AsyncStorage.setItem('pantryIngredients', stringifyPantryIngredients);\n    } catch (error){\n      console.log(error);\n    }\n  };\n\n  const getPantryIngredientsFromUserDevice = async () => {\n    try {\n      const pantryIngredients = await AsyncStorage.getItem('pantryIngredients');\n      if(pantryIngredients != null){\n        setPantryIngredients(JSON.parse(pantryIngredients))\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  const addPantryIngredient = text => {\n    if (text == '') {\n      Alert.alert(\n        'No item entered',\n        'Please enter an ingredient when adding to your pantry list',\n      );\n    } else {\n      setPantryIngredients(prevPantryIngredients => {\n        return [{id: Math.random(), ingredient: text}, ...prevPantryIngredients];\n      });\n    }\n  };\n\n\n\n\n  return (\n    <View style={styles.container}>\n      <Header title=\"Pantry List\" />\n      <AddIngredient addPantryIngredient={addPantryIngredient} />\n      <FlatList\n        data={pantryIngredients}\n        renderItem={({item}) => <ListItem item={item} deleteItem={deleteItem}\n          />}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nexport default App;"]},"metadata":{},"sourceType":"module"}